import csv
import pwinput
from prettytable import PrettyTable
from datetime import datetime, timedelta


hari_ini = datetime.now() # fitur untuk mengambil data dari waktu sekarang

tanggal = hari_ini.strftime("%d/%m/%Y %H:%M") # stringtime digunakan untuk mengubah datetime ke bentuk string dalam bentuk tertentu. lambang Persen digunakan sebagai format tanggal

tahun, bulan = (hari_ini.strftime("%Y/%m")).split('/') # split digunakan untuk memisahkan string menjadi list

tanggal_kembali = (hari_ini+timedelta(days=30)).strftime("%d/%m/%Y %H:%M") # timedelta digunakan untuk menambah waktu ke tanggal setelah sewa memasuki deadline tanggalnya



# Membuat CSV
def muat_data():
    global data_produk, data_user, user_pass, data_pemasukan, admin_pass
    try:
        data_produk = []
        with open("Data.csv", 'r', newline ='') as file: # membuat csv data produk
            reader = csv.reader(file) #rumus membaca file
            for row in reader: #for adalah perulangan yang dapat dibatasi
                data_produk.append({"ID": row[0], "nama alat": row[1], "harga sewa": int(row[2]), "status": row[3]}) # Menambah item dari belakang
    except FileNotFoundError:
        # data kamar default ketika file tidak ditemukan
        data_produk = [ #dictionary
            {"ID": "1", 
            "nama alat": "Excavator",
            "harga sewa": 1500000,
            "status": "tersedia",
            "pemilik" : ""},
            {"ID": "2", 
            "nama alat": "Bulldozer",
            "harga sewa": 2000000,
            "status": "tersedia",
            "pemilik" : ""},
            {"ID": "3",
             "nama alat": "Crane",
             "harga sewa": 2000000,
             "status": "tersedia",
             "pemilik" : ""},
            {"ID": "4",
             "nama alat": "Forklift",
             "harga sewa": 950000,
             "status": "tersedia",
             "pemilik" : ""},
            {"ID": "5",
            "nama alat": "Dozer", 
            "harga sewa": 1000000, 
            "status": "tersedia",
            "pemilik" : ""}
        ]
        with open("Data.csv", 'w', newline = '') as file: # untuk menyimpan data di Data.csv
            fieldnames = ["ID", "nama alat", "harga sewa", "status"]  # nama field
            writer = csv.DictWriter(file, fieldnames=fieldnames)
            for produk in data_produk: # for adalah perulangan yang dibatasi
                writer.writerow(produk) # writerow untuk mengambil satu baris. kalau writerows mengambil lebih dari satu baris

    data_user = [] # dictionary
    try: # try except adalah kalau terjadi error akan diberitahu dengan bahasa manusia
        with open("Data_user.csv", 'r', newline ='') as file: # cara membuat file csv
            reader = csv.reader(file) # rumus membaca file csv
            for row in reader: # for-> perulangan yg dibatasi
                data_user.append({"username": row[0], "ID alat": row[1], "tanggal bayar": row[2], "tanggal kembali": row[3], "saldo": row[3]})
    except FileNotFoundError:
        open("Data_user.csv", 'w', newline = '') # menyimpan data ke file csv

    user_pass = [] # dictionary
    try: # try except kalau terjadi error akan diberitahu errornya dengan bahasa manusia
        with open("userpass.csv", 'r', newline ='') as file: # cara membuat file csv
            reader = csv.reader(file) # rumus membaca file csv
            for row in reader: # for-> perulangan yg dibatasi
                user_pass.append({"username": row[0], "Pw": row[1]})
    except:
        open("userpass.csv", 'w', newline ='')

    data_pemasukan = [] # dictionary
    try: 
        with open("data_pemasukan.csv", 'r', newline ='') as file: # cara membuat file csv
            reader = csv.reader(file) # rumus membuat csv
            for row in reader: 
                data_pemasukan.append({"tahun": row[0], "bulan": row[1], "pemasukan": int(row[2])}) # append itu menambahkan item dari belakang
    except:
        with open("data_pemasukan.csv", 'w', newline ='') as file: # menyimpan data csv
            writer = csv.writer(file) # rumus membaca file csv
            writer.writerow([tahun, bulan, 0])
    admin_pass = {}
    try:
        with open("adminpass.csv", 'r', newline ='') as file:
            reader = csv.reader(file)
            for row in reader:
                admin_pass = {"username": row[0], "Pw": row[1]} # buat sesuai index
    except FileNotFoundError:
        admin_pass = { "username" : "Manisha", "Pw" : "12345"} # membuat dictionary username dan Pw
        with open("adminpass.csv", 'w', newline ='') as file: # menyimpan file csv
            fieldnames = ["username", "Pw"]
            writer = csv.DictWriter(file, fieldnames=fieldnames) # csv.Dictwriter adalah membaca file csv berupa dictionary
            writer.writerow(admin_pass)

# Menyimpan data
muat_data()

def simpan_data(): # simpan data ke csv
    with open("Data_user.csv", 'w', newline ='') as file: # sebagai menyimpan data dan membuat variabel csv
        writer = csv.writer(file) # rumus menulis dan menyimpan data didalam file csv
        for user in data_user:
            writer.writerow([user["username"], user["ID alat"], user["tanggal bayar"], user["tanggal kembali"], user["saldo"]])

    with open("Data.csv", 'w', newline ='') as file:
        writer = csv.writer(file)
        for produk in data_produk:
            writer.writerow([produk["ID"], produk["nama alat"], produk["harga sewa"], produk["status"]])

    with open("data_pemasukan.csv", 'w', newline ='') as file:
        writer = csv.writer(file)
        for pemasukan in data_pemasukan:
            writer.writerow([pemasukan["tahun"], pemasukan["bulan"], pemasukan["pemasukan"]])

    with open("userpass.csv", 'w', newline ='') as file:
        writer = csv.writer(file)
        for akun in user_pass:
            writer.writerow([akun["username"], akun["Pw"]])

    with open("adminpass.csv", 'w', newline ='') as file:
        writer = csv.writer(file)
        writer.writerow([admin_pass["username"], admin_pass["Pw"]])

simpan_data() # memanggil fungsi tanpa repot menulis program berulang ulang
muat_data()

# format uang
def format_uang(nominal): # Fungsi untuk menambahkan Rp pada nominal uang
    return f"Rp{nominal:,}".replace(',','.')

# tipe user (normal/admin)
tipe_user = ''


tabel_alat = PrettyTable()

# untuk update data alat berat ke tabel
def refresh_table_alat():
    tabel_alat.clear() #menghapus array dalam baris
    tabel_alat.title = "DAFTAR ALAT BERAT TRANSFORMER" # sebagai judul tabel
    if tipe_user == "normal": # tipe user normal/admin
        tabel_alat.field_names = ["ID", "nama alat", "harga sewa", "status"] #field table kamar ketika jadi pengunjung
        for produk in data_produk: 
            if produk["status"] == "tersedia": 
                tabel_alat.add_row([produk["ID"], produk["nama alat"], format_uang(produk["harga sewa"]), produk["status"]]) #add row adalah tambahkan baris dalam tabel
    else: #jika tipe user adalah admin
        tabel_alat.field_names = ["ID", "nama alat", "harga sewa", "status"] #field table kamar ketika jadi admin
        for produk in data_produk: 
            tabel_alat.add_row([produk["ID"], produk["nama alat"], produk["harga sewa"], produk["status"]]) #add row adalah tambahkan baris didalam tabel



def inputhandler(prompt, inputtype="str"): #prompt adalah definisi paramater 1, inputtype adalah definisi parameter 2
#promt = masukkan inputan anda!
#inputtype ini kalau gak dipakai otomatis inputtype berupa str sebagai parameter 2
    while True: #while true adalah bentuk perulangan yang tidak memiliki batas
        try: 
            if inputtype == "str": #merubah inputtype menjadi string
                userinput = input(prompt) 
            elif inputtype == "int": #merubah inputtype menjadi integer
                userinput = int(input(prompt)) 
            elif inputtype == "digit": #merubah inputtype menjadi digit. digit adalah str yang berisi angkat tanpa koma tanpa negatif. hanya angka
                userinput = input(prompt) 
                if not userinput.isdigit(): 
                    print("Input hanya bisa berupa angka\n")
                    return inputhandler(prompt, "digit") #Return: Nilai yang dikembalikan ini bisa berupa hasil operasi dalam fungsi, nilai variabel, atau struktur data lainnya. Ketika fungsi dipanggil dalam ekspresi, fungsi tersebut akan "digantikan" oleh nilai yang dikembalikan.
            return userinput #mengembalikan nilai userinput
        except KeyboardInterrupt:
            print("\nGabisa Error!\n")
        except ValueError:
            print("Input hanya bisa berupa angka\n")
        except Exception as error:
            print(f"Error baru nih: {error}\n")

# Tambah Alat
def tambah_alat(): #function untuk menambah kamar (menu admin)
    while True: #while true adalah bentuk perulangan yang tidak memiliki batas
        id = inputhandler("ID alat: ", "digit") #input dalam bentuk digit
        if any(produk["ID"] == id for produk in data_produk): #jika nomor yang dimasukkan sama dengan nomor kamar didalam data_kamar maka...
            print("Alat Sudah Ada!\n") 
        else:
            break #memberhentikan perulangan while
    print("\nnama alat")
    print("1. Excavator")
    print("2. Bulldozer")
    print("3. Crane")
    print("4. Forklift")
    while True: #while true adalah bentuk perulangan yang tidak memiliki batas
        pilih = inputhandler("Pilihan: ") 
        if pilih == '1':
            nama_alat = "Excavator"
            break #memberhentikan perulangan while
        elif pilih == '2':
            nama_alat = "Bulldozer"
            break #memberhentikan perulangan while
        elif pilih == '3':
            nama_alat = "Crane"
            break #memberhentikan perulangan while
        elif pilih == '4':
            nama_alat = "Forklift"
        else:
            print("Pilihan Tidak Ada!")
            
    harga = int(inputhandler("Harga sewa: ", "digit")) #input harga sewa dalam bentuk digit
    
    data_produk.append({"ID": id, "nama alat": nama_alat, "harga sewa": harga, "status": "tersedia"}) # append menambahkan item dari belakang.
    # sort = urut list/dict dari angkah terkecil
    # lambda = mirip def, tapi tanpa nama function. hanya menggunakan "lambda" sudah seperti menggunakan function
    data_produk.sort(key=lambda produk: produk["ID"]) #biar urutan id alat dari angka terkecil
    simpan_data()  #memanggil function tanpa perlu repot menulis program berulang ulang
    refresh_table_alat() #memanggil function tanpa perlu repot menulis program berulang ulang
    print(tabel_alat) #untuk memanggil tabel alat dalam bentuk prettytable
    print(f"Berhasil menambahkan alat {id} ke data produk")

# Update Alat
def update_alat():
    print(tabel_alat) #untuk memanggil tabel alat dalam bentuk prettytable
    while True: 
        id = inputhandler("ID alat: ", "digit") #input ID alat dalam bentuk digit
        if any(produk["ID"] == id for produk in data_produk): #jika ID sama dengan ID alat yang ada didalam data_produk
            break #untuk memberhentikan perulangan while
        else:
            print("ID Tidak Ada!\n")
    
        print("\nnama alat")
    print("1. Excavator")
    print("2. Bulldozer")
    print("3. Crane")
    print("4. Forklift")
    while True: #while true adalah bentuk perulangan yang tidak memiliki batas
        pilih = inputhandler("Pilihan: ") 
        if pilih == '1':
            nama_alat = "Excavator"
            break #memberhentikan perulangan while
        elif pilih == '2':
            nama_alat = "Bulldozer"
            break #memberhentikan perulangan while
        elif pilih == '3':
            nama_alat = "Crane"
            break #memberhentikan perulangan while
        elif pilih == '4':
            nama_alat = "Forklift"
        else:
            print("Pilihan Tidak Ada!")

    harga = int(inputhandler("Harga sewa: ", "digit")) #input harga sewa dalam bentuk digit

    for produk in data_produk: 
    #untuk produk jika ada didalam data_produk maka...
        if produk["nomor"] == id: #jika id alat sama dengan id yang diinputkan
            produk["nama alat"] = nama_alat #nama alat sama dengan nama alat yang diinputkan
            produk["harga sewa"] = harga #harga sewa alat sama dengan harga yang diinputkan
            simpan_data() #memanggil function tanpa perlu repot menulis program berulang ulang
            refresh_table_alat() 
            print(tabel_alat) #memanggil tabel alat dalam bentuk prettytable
            print(f"Berhasil mengubah data dari produk {id}")

# Hapus Alat
def hapus_alat():
    print(tabel_alat)
    while True: 
        id = inputhandler("ID alat: ", "digit") #input id alat dalam bentuk digit
        if any(produk["ID"] == id for produk in data_produk): #jika id sama dengan id alat yang ada didalam data_produk
            break 
        else:
            print("Produk Tidak Ada!\n")
        
    for produk in data_produk: 
    #untuk kamar jika ada didalam data_kamar maka...
        if produk["ID"] == produk: #jika nomor kamar sama dengan nomor yang diinputkan user
            if produk["pemilik"] != '': #jika pemilik tidak sama dengan
                for user in data_user: #untuk user didalam data_user
                    if user["username"] == produk["pemilik"]: #jika username sama dengan pemilik kamar
                        produk["status"] = "pending" #status kamar berubah menjadi pending karena kamar akan terhapus jika penyewa belum keluar
                        simpan_data() #memanggil function tanpa perlu repot menulis program berulang ulang
                        print("menunggu user untuk berhenti menyewa")
            else:
                data_produk.remove(produk) #menghapus kamar didalam data_kamar
                simpan_data() #memanggil function tanpa perlu repot menulis program berulang ulang
                refresh_table_alat() #memanggil function tanpa perlu repot menulis program berulang ulang
                print("kamar dihapus")

# Menu Admin
def menu_admin():
    print(f"\n{'='*10} Menu Admin {'='*10}") # judul
    while True:
        print("1. Lihat Daftar Alat")
        print("2. Tambah Alat")
        print("3. Update Alat")
        print("4. Hapus Alat")
        print("5. Lihat Transaksi")
        print("6. Keluar")
        pilih = inputhandler("Pilih menu (1-6): ")

        if pilih == "1":
            print(tabel_alat)
        elif pilih == "2":
            tambah_alat()
        elif pilih == "3":
            update_alat()
        elif pilih == "4":
            hapus_alat()

        





def menu_awal():
    print('='*10, "Pilih Role", '='*10)
    while True: #while true adalah bentuk perulangan yang tidak memiliki batas
        print("[1] Penyewa")
        print("[2] Admin")
        print("[3] Selesai")
        while True: #while true adalah bentuk perulangan yang tidak memiliki batas
            try: #try except adalah jika terjadi error maka akan diberitahu errornya apa dengan bahasa kita
                pilih = inputhandler("Pilih: ")
                break #untuk memberhentikan perulangan while
            except KeyboardInterrupt:
                print("ea\n")
        if pilih == '1':
            pilih = inputhandler("Apakah anda sudah memiliki akun? [y/n]: ")
            if pilih.lower() == 'y': #lower biar bisa huruf besar dan huruf kecil
                menu_login()#memanggil function tanpa perlu repot menulis program berulang ulang
            elif pilih.lower() == 'n': #lower biar bisa huruf besar dan huruf kecil
                menu_register()#memanggil function tanpa perlu repot menulis program berulang ulang
        elif pilih == '2':
            login_admin()#memanggil function tanpa perlu repot menulis program berulang ulang
        elif pilih == '3':
            print("\nTerima Kasih")
            # exit tu nutup program secara keseluruhan
            exit()#memanggil function tanpa perlu repot menulis program berulang ulang
        else:
            print("Pilihan tidak valid!\n")

def menu_register():
    found = False
    tambah_username = input("Buatlah username: ")
    tambah_pin = str(input("Buatlah PIN: "))
    tambah_saldo = float(input("Isi saldo e-money (tanpa titik): Rp"))
    with open(csv_file, "a", newline='') as file:
        csv_writer = csv.writer(file)
        csv_writer.writerow([tambah_username, tambah_pin, tambah_saldo])
        print(f"Data {tambah_username} berhasil ditambahkan.")

        with open(csv_file, "r") as filename:
            csv_file = csv.reader(filename)
            for row in csv_file:
                if row[1] == tambah_username:
                    found = True
                    print("Akun anda telah terdaftar")
            
            if not found:
                print("Akun anda berhasil didaftarkan")
                menu()
def menu_login():
    with open (csv_file, "r") as filename:
        csv_file = csv.reader(filename)
        for row in csv_file:
            if row[1] == tambah_username and row[2] == tambah_Pw:
                found = True
                print(f"Selamat datang {tambah_username} di toko sewa alat berat")
                break
    
    indeks = 3
    login_username = input("Masukkan Username: ")
    login_Pw = pwinput.pwinput(input("Masukkan Pw: "))

    if found:
        print(f"Selamat datang {login_username}")
    else:
        print("Username atau Pw anda salah, silahkan coba lagi")

        if len(login_username) == 0 and len(login_Pw) == 0:
            print("Silahkan uang programnya")
            exit()




print()
print("===========================================")
print("|       SEWA ALAT BERAT TRANSFORMER       |")
menu_awal()#memanggil function tanpa perlu repot menulis program berulang ulang


        
    
